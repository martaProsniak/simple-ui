/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface SuiModal {
        "cancelText": string;
        "confirmText": string;
        "header": string;
        "open": () => Promise<void>;
        "opened": boolean;
        "showHeader": boolean;
        "withConfirmation": boolean;
    }
}
export interface SuiModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSuiModalElement;
}
declare global {
    interface HTMLSuiModalElementEventMap {
        "suiUserChoice": boolean;
    }
    interface HTMLSuiModalElement extends Components.SuiModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSuiModalElementEventMap>(type: K, listener: (this: HTMLSuiModalElement, ev: SuiModalCustomEvent<HTMLSuiModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSuiModalElementEventMap>(type: K, listener: (this: HTMLSuiModalElement, ev: SuiModalCustomEvent<HTMLSuiModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSuiModalElement: {
        prototype: HTMLSuiModalElement;
        new (): HTMLSuiModalElement;
    };
    interface HTMLElementTagNameMap {
        "sui-modal": HTMLSuiModalElement;
    }
}
declare namespace LocalJSX {
    interface SuiModal {
        "cancelText"?: string;
        "confirmText"?: string;
        "header"?: string;
        "onSuiUserChoice"?: (event: SuiModalCustomEvent<boolean>) => void;
        "opened"?: boolean;
        "showHeader"?: boolean;
        "withConfirmation"?: boolean;
    }
    interface IntrinsicElements {
        "sui-modal": SuiModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sui-modal": LocalJSX.SuiModal & JSXBase.HTMLAttributes<HTMLSuiModalElement>;
        }
    }
}
